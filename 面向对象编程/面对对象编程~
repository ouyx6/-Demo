面对对象编程(Object Oriented Programming)
抽象 封装 继承 多态
－－－－－－－－－－－－－－－－－－－－－－－－
知识点：
面向对象
抽象
封装，类
继承和方法重写
多态
私有属性和方法
类方法和静态方法
property装饰器
类中的特殊方法
－－－－－－－－－－－－－－－－－－－－－－－－
类的名称：
类的属性：一组数据
类的方法：一些函数
创建类和实例对象：class 类名：
			代码块（属性和方法）
  ----------------------------------------
  |>>> class Dog: #　创建一个dog的类
  |...     pass
  |... 
  |>>> dog = Dog()　＃创建这个类的实例
  |>>> print(dog)
  |<__main__.Dog object at 0x7fb92a7e83c8>
  －－－－－－－－－－－－－－－－－－－－－
－－－－－－－－－－－－－－－－－－－－－－－－－
新建一个类，就会自动创建它的内置方法和属性。
##############################################################
#>>> dir(Dog)
#['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', #'__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', #'__hash__', '__init__', '__le__', '__lt__', '__module__', #'__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', #'__setattr__', '__sizeof__', '__str__', '__subclasshook__', #'__weakref__']
#############################################################
---------------------------------
__init__ 方法：
 第一个参数 self
__repr__ :return 定义类的实例的打印结果
-------------------------------
封装：
	用类将数据和给予数据的操作封装在一起，隐藏内部数据，对外提供公共的访问接口。

---------------------------------
继承和方法重写
继承：单继承 和 多继承
----------------------------------
多态：
----------------------------------
类属性／类方法／静态方法
＃通过类本身访问公有的类属性
＃通过子类访问公有的类属性
＃通过实例化对象访问公有的类属性

类的方法和类属性：

装饰器：＠classmethod

＃通过类本身访问类方法
＃通过子类访问类方法
＃通过实例化对象访问类方法

＃可以通过类方法来修改类属性
#!/usr/bin/env python3
class Animal(object):
    owner = 'jack'        ＃类属性

    def __init__(self, name): ＃类方法 name 为该方法的属性
        self._name = name

    @classmethod		＃装饰器，直接访问类属性 方法属性 cls ， 调用类属性 用 cls.属性名
    def get_owner(cls):
        return cls.owner

    @classmethod
    def set_owner(cls,name):
    	cls.owner = name 

animal ＝ Animal('dog') ＃实例化对象
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

静态方法：
class Animal(object):
	owner = 'jack'
	def __init__(self, name):
		self._name = name

	@staticmethod              #第一个强制参数 无 ,在定义方法时可以引用类属性
	def order_animal_food():
		print('ording...')
		print('ok')








